#!/bin/bash

# show-colors - Demonstrates all available colors and text formatting
# This script showcases the Shell Starter color library capabilities

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SHELL_STARTER_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

source "${SHELL_STARTER_ROOT}/lib/main.sh"

show_help() {
	# Show banner header for help
	banner::shell_starter minimal
	cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Displays all available colors and text formatting options from Shell Starter.

OPTIONS:
    -h, --help        Show this help message and exit
    -v, --version     Show version information and exit
    --update          Check for available updates
    --check-version   Show detailed version status and check for updates
    --notify-config   Configure update notification settings
    --uninstall       Remove Shell Starter installation
    --no-demo         Skip the color demonstration examples
    --plain           Display colors without fancy formatting

EXAMPLES:
    $(basename "$0")              # Show all colors with examples
    $(basename "$0") --no-demo    # Show colors only, no examples
    $(basename "$0") --plain      # Show colors in plain format
EOF
}

show_basic_colors() {
	echo -e "${COLOR_BOLD}Basic Colors:${COLOR_RESET}"
	echo -e "  ${COLOR_BLACK}COLOR_BLACK${COLOR_RESET}     - Black text"
	echo -e "  ${COLOR_RED}COLOR_RED${COLOR_RESET}       - Red text"
	echo -e "  ${COLOR_GREEN}COLOR_GREEN${COLOR_RESET}     - Green text"
	echo -e "  ${COLOR_YELLOW}COLOR_YELLOW${COLOR_RESET}    - Yellow text"
	echo -e "  ${COLOR_BLUE}COLOR_BLUE${COLOR_RESET}      - Blue text"
	echo -e "  ${COLOR_MAGENTA}COLOR_MAGENTA${COLOR_RESET}   - Magenta text"
	echo -e "  ${COLOR_CYAN}COLOR_CYAN${COLOR_RESET}      - Cyan text"
	echo -e "  ${COLOR_WHITE}COLOR_WHITE${COLOR_RESET}     - White text"
}

show_bright_colors() {
	echo -e "\n${COLOR_BOLD}Bright Colors:${COLOR_RESET}"
	echo -e "  ${COLOR_BRIGHT_BLACK}COLOR_BRIGHT_BLACK${COLOR_RESET}   - Bright black text"
	echo -e "  ${COLOR_BRIGHT_RED}COLOR_BRIGHT_RED${COLOR_RESET}     - Bright red text"
	echo -e "  ${COLOR_BRIGHT_GREEN}COLOR_BRIGHT_GREEN${COLOR_RESET}   - Bright green text"
	echo -e "  ${COLOR_BRIGHT_YELLOW}COLOR_BRIGHT_YELLOW${COLOR_RESET}  - Bright yellow text"
	echo -e "  ${COLOR_BRIGHT_BLUE}COLOR_BRIGHT_BLUE${COLOR_RESET}    - Bright blue text"
	echo -e "  ${COLOR_BRIGHT_MAGENTA}COLOR_BRIGHT_MAGENTA${COLOR_RESET} - Bright magenta text"
	echo -e "  ${COLOR_BRIGHT_CYAN}COLOR_BRIGHT_CYAN${COLOR_RESET}    - Bright cyan text"
	echo -e "  ${COLOR_BRIGHT_WHITE}COLOR_BRIGHT_WHITE${COLOR_RESET}   - Bright white text"
}

show_text_formatting() {
	echo -e "\n${COLOR_BOLD}Text Formatting:${COLOR_RESET}"
	echo -e "  ${COLOR_BOLD}COLOR_BOLD${COLOR_RESET}       - Bold text"
	echo -e "  ${COLOR_DIM}COLOR_DIM${COLOR_RESET}        - Dimmed text"
	echo -e "  ${COLOR_UNDERLINE}COLOR_UNDERLINE${COLOR_RESET} - Underlined text"
	echo -e "  ${COLOR_BLINK}COLOR_BLINK${COLOR_RESET}      - Blinking text"
	echo -e "  ${COLOR_REVERSE}COLOR_REVERSE${COLOR_RESET}    - Reversed text"
}

show_semantic_colors() {
	echo -e "\n${COLOR_BOLD}Semantic Colors:${COLOR_RESET}"
	echo -e "  ${COLOR_INFO}COLOR_INFO${COLOR_RESET}      - Information messages"
	echo -e "  ${COLOR_SUCCESS}COLOR_SUCCESS${COLOR_RESET}   - Success messages"
	echo -e "  ${COLOR_WARNING}COLOR_WARNING${COLOR_RESET}   - Warning messages"
	echo -e "  ${COLOR_ERROR}COLOR_ERROR${COLOR_RESET}     - Error messages"
	echo -e "  ${COLOR_DEBUG}COLOR_DEBUG${COLOR_RESET}     - Debug messages"
}

show_plain_colors() {
	echo "Basic Colors:"
	echo "  COLOR_BLACK     \\033[0;30m"
	echo "  COLOR_RED       \\033[0;31m"
	echo "  COLOR_GREEN     \\033[0;32m"
	echo "  COLOR_YELLOW    \\033[0;33m"
	echo "  COLOR_BLUE      \\033[0;34m"
	echo "  COLOR_MAGENTA   \\033[0;35m"
	echo "  COLOR_CYAN      \\033[0;36m"
	echo "  COLOR_WHITE     \\033[0;37m"

	echo -e "\nBright Colors:"
	echo "  COLOR_BRIGHT_BLACK     \\033[1;30m"
	echo "  COLOR_BRIGHT_RED       \\033[1;31m"
	echo "  COLOR_BRIGHT_GREEN     \\033[1;32m"
	echo "  COLOR_BRIGHT_YELLOW    \\033[1;33m"
	echo "  COLOR_BRIGHT_BLUE      \\033[1;34m"
	echo "  COLOR_BRIGHT_MAGENTA   \\033[1;35m"
	echo "  COLOR_BRIGHT_CYAN      \\033[1;36m"
	echo "  COLOR_BRIGHT_WHITE     \\033[1;37m"

	echo -e "\nText Formatting:"
	echo "  COLOR_BOLD       \\033[1m"
	echo "  COLOR_DIM        \\033[2m"
	echo "  COLOR_UNDERLINE  \\033[4m"
	echo "  COLOR_BLINK      \\033[5m"
	echo "  COLOR_REVERSE    \\033[7m"
	echo "  COLOR_RESET      \\033[0m"
}

show_demo() {
	echo -e "\n${COLOR_BOLD}${COLOR_UNDERLINE}Color Demonstration Examples:${COLOR_RESET}"
	echo -e "\n${COLOR_SUCCESS}✓ Success:${COLOR_RESET} Operation completed successfully!"
	echo -e "${COLOR_WARNING}⚠ Warning:${COLOR_RESET} This is a warning message"
	echo -e "${COLOR_ERROR}✗ Error:${COLOR_RESET} Something went wrong"
	echo -e "${COLOR_INFO}ℹ Info:${COLOR_RESET} Here's some information"
	echo -e "${COLOR_DEBUG}🐛 Debug:${COLOR_RESET} Debugging information"

	echo -e "\n${COLOR_BOLD}Combination Examples:${COLOR_RESET}"
	echo -e "${COLOR_BOLD}${COLOR_RED}Bold Red${COLOR_RESET}"
	echo -e "${COLOR_UNDERLINE}${COLOR_BLUE}Underlined Blue${COLOR_RESET}"
	echo -e "${COLOR_DIM}${COLOR_CYAN}Dimmed Cyan${COLOR_RESET}"
	echo -e "${COLOR_REVERSE}${COLOR_GREEN} Reversed Green ${COLOR_RESET}"

	echo -e "\n${COLOR_BRIGHT_MAGENTA}${COLOR_BOLD}🎨 All colors work great together! 🎨${COLOR_RESET}"
}

main() {
	local show_demo_flag=true
	local plain_mode=false

	# Enable optional background update notifications
	enable_background_updates

	while [[ $# -gt 0 ]]; do
		case $1 in
		--no-demo)
			show_demo_flag=false
			shift
			;;
		--plain)
			plain_mode=true
			shift
			;;
		--help | -h | --version | -v | --update | --check-version | --notify-config | --uninstall)
			parse_common_args "$(basename "$0")" "$@"
			;;
		-*)
			log::error "Unknown option: $1"
			echo "Use --help for usage information."
			exit 1
			;;
		*)
			log::error "Unexpected argument: $1"
			echo "Use --help for usage information."
			exit 1
			;;
		esac
	done

	# Welcome banner for the script
	banner::shell_starter minimal

	echo ""
	echo -e "${COLOR_BOLD}${COLOR_CYAN}Color Library Showcase${COLOR_RESET}"
	echo "========================="

	if [[ "$plain_mode" == "true" ]]; then
		show_plain_colors
	else
		show_basic_colors
		show_bright_colors
		show_text_formatting
		show_semantic_colors

		if [[ "$show_demo_flag" == "true" ]]; then
			show_demo
		fi
	fi

	echo -e "\n${COLOR_DIM}Use these color variables in your Shell Starter scripts!${COLOR_RESET}"
	log::info "Color showcase completed"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	main "$@"
fi
